/*
==============================================================
                    WLS AUTHENTICATION ROUTES
==============================================================
üìù Description: API Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Authentication ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sensor
üéØ Purpose: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£, ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö, ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡πÅ‡∏•‡∏∞ CRUD ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
üîß Technologies: Express Router + JWT + BCrypt + Nodemailer + MySQL

üìÇ Dependencies:
‚îú‚îÄ‚îÄ ../lib/db.js                    ‚Üí Database Connection
‚îú‚îÄ‚îÄ ../middleware/authMiddleware.js ‚Üí JWT Token Verification
‚îî‚îÄ‚îÄ ../lib/.env                     ‚Üí Environment Variables

üåê Base URL: /auth
Example: http://localhost:3000/auth/login

‚ö†Ô∏è  Important Notes:
1. ‡∏ó‡∏∏‡∏Å Protected Routes ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á Authorization Header
2. Email Configuration ‡πÉ‡∏ä‡πâ Gmail SMTP
3. File uploads ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô /uploads folder
4. JWT Token ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
==============================================================
*/

import express from "express";
import { connectToDatabase } from "../lib/db.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import nodemailer from "nodemailer";
import authenticateToken from "../middleware/authMiddleware.js"; // JWT Middleware
import fileUpload from "express-fileupload";

// üîß Load Environment Variables
dotenv.config({ path: "../lib/.env" });

// üöÄ Initialize Router & Middleware
const router = express.Router();
router.use(fileUpload()); // Enable file upload functionality

/*
==============================================================
                    üîê AUTHENTICATION ROUTES
==============================================================
*/

// üìù Register Route
// POST /auth/register
// Purpose: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
router.post("/register", async (req, res) => {
  const { username, email, password } = req.body;
  try {
    const db = await connectToDatabase();
    
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingUser] = await db.query("SELECT * FROM users WHERE email = ?", [email]);
    if (existingUser.length > 0) {
      return res.status(409).json({ message: "Email already exists" });
    }

    // üîí Hash Password ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Verification Code
    const hashPassword = await bcrypt.hash(password, 10);
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString(); // 6 ‡∏´‡∏•‡∏±‡∏Å

    // üíæ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå Default
    const defaultProfilePicture = "uploads/MEOW.png"; // ‡∏£‡∏π‡∏õ Default
    await db.query(
      "INSERT INTO users (username, email, password, verification_code, profile_picture) VALUES (?, ?, ?, ?, ?)",
      [username, email, hashPassword, verificationCode, defaultProfilePicture]
    );

    // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "email@gmail.com",    // Gmail Account
        pass: "App Password",         // App Password (NOT regular password)
      },
    });

    await transporter.sendMail({
      from: "WLS",
      to: email,
      subject: "Verify Your Email",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9;">
          <h2 style="text-align: center; color: #4CAF50;">Welcome to WLS!</h2>
          <p style="text-align: center; font-size: 16px; color: #333;">
            Thank you for registering with us. Please use the verification code below to verify your email address:
          </p>
          <div style="text-align: center; margin: 20px 0;">
            <span style="font-size: 24px; font-weight: bold; color: #4CAF50; padding: 10px 20px; border: 1px solid #4CAF50; border-radius: 5px; background-color: #fff;">
              ${verificationCode}
            </span>
          </div>
          <p style="text-align: center; font-size: 14px; color: #666;">
            If you did not request this, please ignore this email.
          </p>
          <footer style="text-align: center; font-size: 12px; color: #aaa; margin-top: 20px;">
            ¬© 2025 WLS. All rights reserved.
          </footer>
        </div>
      `,
    });

    res.status(201).json({
      message: "User registered successfully. Please verify your email.",
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// üîÑ Resend Verification Route
// POST /auth/resend-verification
// Purpose: ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ verify
router.post("/resend-verification", async (req, res) => {
  const { email } = req.body;
  try {
    const db = await connectToDatabase();
    const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (rows.length === 0) {
      return res.status(404).json({ message: "Email not found" });
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (rows[0].is_verified) {
      return res.status(400).json({ message: "Email is already verified" });
    }

    // üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    await db.query("UPDATE users SET verification_code = ? WHERE email = ?", [
      verificationCode,
      email,
    ]);

    // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "email@gmail.com",
        pass: "App Password",
      },
    });

    await transporter.sendMail({
      from: "WLS",
      to: email,
      subject: "Resend Verification Email",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9;">
          <h2 style="text-align: center; color: #4CAF50;">Resend Verification Email</h2>
          <p style="text-align: center; font-size: 16px; color: #333;">
            Please use the verification code below to verify your email address:
          </p>
          <div style="text-align: center; margin: 20px 0;">
            <span style="font-size: 24px; font-weight: bold; color: #4CAF50; padding: 10px 20px; border: 1px solid #4CAF50; border-radius: 5px; background-color: #fff;">
              ${verificationCode}
            </span>
          </div>
          <p style="text-align: center; font-size: 14px; color: #666;">
            If you did not request this, please ignore this email.
          </p>
          <footer style="text-align: center; font-size: 12px; color: #aaa; margin-top: 20px;">
            ¬© 2025 WLS. All rights reserved.
          </footer>
        </div>
      `,
    });

    res.status(200).json({ message: "Verification email resent successfully" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// üîë Login Route
// POST /auth/login
// Purpose: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const db = await connectToDatabase();
    const [rows] = await db.query("SELECT * FROM users WHERE email = ?", [email]);

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (rows.length === 0) {
      return res.status(404).json({ message: "Email not found" });
    }

    // üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const isMatched = await bcrypt.compare(password, rows[0].password);
    if (!isMatched) {
      return res.status(401).json({ message: "Wrong password" });
    }

    // üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
    const token = jwt.sign(
      { id: rows[0].id, email: rows[0].email },
      process.env.JWT_KEY,
      { expiresIn: "24h" } // Token ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    );

    res.status(201).json({ token });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// ‚úÖ Verify Email Route
// POST /auth/verify
// Purpose: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
router.post("/verify", async (req, res) => {
  const { email, verificationCode } = req.body;
  try {
    const db = await connectToDatabase();
    const [rows] = await db.query(
      "SELECT * FROM users WHERE email = ? AND verification_code = ?",
      [email, verificationCode]
    );

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    if (rows.length === 0) {
      return res.status(400).json({ message: "Invalid verification code" });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô verified
    await db.query(
      "UPDATE users SET is_verified = 1, verification_code = NULL WHERE email = ?",
      [email]
    );

    res.status(200).json({ message: "Email verified successfully" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// üè† Home Route (Protected)
// GET /auth/home
// Purpose: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Login (‡πÉ‡∏ä‡πâ JWT Token)
router.get("/home", async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1]; // ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å Header
  if (!token) return res.status(401).json({ message: "Unauthorized" });

  try {
    // üîì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
    const decoded = jwt.verify(token, process.env.JWT_KEY);
    const db = await connectToDatabase();
    const [rows] = await db.query("SELECT * FROM users WHERE id = ?", [decoded.id]);
    
    if (rows.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }
    
    res.status(200).json({ user: rows[0] });
  } catch (error) {
    res.status(401).json({ message: "Invalid token" });
  }
});

/*
==============================================================
                    üìä SENSOR DATA ROUTES
==============================================================
*/

// üì° Receive Sensor Data from ESP32
// POST /auth/api/sensor-data
// Purpose: ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32 ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database
router.post("/api/sensor-data", async (req, res) => {
  const { userId, esp32Serial, nodeName, sensorType, value } = req.body;
  try {
    const db = await connectToDatabase();

    // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    await db.query(
      "INSERT INTO sensor_data (user_id, esp32_serial, node_name, sensor_type, sensor_value, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
      [userId, esp32Serial, nodeName, sensorType, value, new Date()]
    );

    res.status(201).json({ message: "Sensor data saved successfully" });
  } catch (error) {
    console.error("Error saving sensor data:", error);
    res.status(500).json({ message: "Error saving sensor data" });
  }
});

// üìà Get Sensor Data for User
// GET /auth/sensor-data
// Purpose: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Protected Route)
router.get("/sensor-data", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id; // ‡∏î‡∏∂‡∏á User ID ‡∏à‡∏≤‡∏Å JWT Token
    const db = await connectToDatabase();

    // üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)
    const [rows] = await db.query(
      "SELECT * FROM sensor_data WHERE user_id = ? ORDER BY timestamp DESC",
      [userId]
    );

    console.log("Sensor Data:", rows); // Debug Log
    res.status(200).json(rows);
  } catch (error) {
    console.error("Error fetching sensor data:", error);
    res.status(500).json({ message: "Error fetching sensor data" });
  }
});

/*
==============================================================
                    üë§ USER PROFILE ROUTES
==============================================================
*/

// üë§ Get User Profile
// GET /auth/profile
// Purpose: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Protected Route)
router.get("/profile", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const db = await connectToDatabase();
    const [rows] = await db.query("SELECT id, username, profile_picture FROM users WHERE id = ?", [userId]);

    if (rows.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }

    // üñºÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Full URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    const profilePictureUrl = `${req.protocol}://${req.get("host")}/${rows[0].profile_picture}`;
    res.status(200).json({ ...rows[0], profile_picture: profilePictureUrl });
  } catch (error) {
    console.error("Error fetching user data:", error);
    res.status(500).json({ message: "Error fetching user data" });
  }
});

// ‚úèÔ∏è Update Username
// PUT /auth/profile/update-name
// Purpose: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Protected Route)
router.put("/profile/update-name", authenticateToken, async (req, res) => {
  const { name } = req.body;
  const userId = req.user.id;

  try {
    const db = await connectToDatabase();
    await db.query("UPDATE users SET username = ? WHERE id = ?", [name, userId]);
    res.status(200).json({ message: "Name updated successfully" });
  } catch (error) {
    console.error("Error updating name:", error);
    res.status(500).json({ message: "Error updating name" });
  }
});

// üîê Update Password
// PUT /auth/profile/update-password
// Purpose: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô)
router.put("/profile/update-password", authenticateToken, async (req, res) => {
  const { oldPassword, newPassword } = req.body;
  const userId = req.user.id;

  try {
    const db = await connectToDatabase();
    const [rows] = await db.query("SELECT password FROM users WHERE id = ?", [userId]);

    if (rows.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }

    // üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤
    const isMatched = await bcrypt.compare(oldPassword, rows[0].password);
    if (!isMatched) {
      return res.status(401).json({ message: "Old password is incorrect" });
    }

    // üîí Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const hashPassword = await bcrypt.hash(newPassword, 10);
    await db.query("UPDATE users SET password = ? WHERE id = ?", [hashPassword, userId]);
    res.status(200).json({ message: "Password updated successfully" });
  } catch (error) {
    console.error("Error updating password:", error);
    res.status(500).json({ message: "Error updating password" });
  }
});

// üì∏ Upload Profile Picture
// POST /auth/profile/upload-picture
// Purpose: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (Protected Route)
router.post("/profile/upload-picture", authenticateToken, async (req, res) => {
  const userId = req.user.id;

  try {
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!req.files || !req.files.profilePicture) {
      return res.status(400).json({ message: "No file uploaded" });
    }

    const file = req.files.profilePicture; // ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å request
    const fileName = `${userId}_${Date.now()}_${file.name}`; // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥)
    const filePath = `uploads/${fileName}`; // Path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå

    // üìÅ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads
    await file.mv(`./${filePath}`);

    // üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const db = await connectToDatabase();
    await db.query("UPDATE users SET profile_picture = ? WHERE id = ?", [filePath, userId]);

    res.status(200).json({ message: "Profile picture updated successfully", filePath });
  } catch (error) {
    console.error("Error uploading profile picture:", error);
    res.status(500).json({ message: "Error uploading profile picture" });
  }
});

/*
==============================================================
                    üìß EMAIL & UTILITY ROUTES
==============================================================
*/

// üìß Send User ID via Email
// POST /auth/send-user-id
// Purpose: ‡∏™‡πà‡∏á User ID ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ESP32)
router.post("/send-user-id", authenticateToken, async (req, res) => {
  const { email, userId } = req.body;

  if (!email || !userId) {
    return res.status(400).json({ message: "Email and User ID are required." });
  }

  try {
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "email@gmail.com",
        pass: "App Password",
      },
    });

    const mailOptions = {
      from: "WLS",
      to: email,
      subject: "Your User ID",
      text: `Dear User,\n\nYour User ID is: ${userId}\n\nThank you.`,
    };

    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: "User ID sent to email successfully." });
  } catch (error) {
    console.error("Error sending email:", error);
    res.status(500).json({ message: "Failed to send email." });
  }
});

// ‚ÑπÔ∏è Get User Information
// GET /auth/user-info
// Purpose: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Protected Route)
router.get("/user-info", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id; // ‡∏î‡∏∂‡∏á User ID ‡∏à‡∏≤‡∏Å JWT Token
    const db = await connectToDatabase();
    const [rows] = await db.query(
      "SELECT id, username, email, profile_picture FROM users WHERE id = ?",
      [userId]
    );

    if (rows.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }

    res.status(200).json(rows[0]);
  } catch (error) {
    console.error("Error fetching user info:", error);
    res.status(500).json({ message: "Internal server error" });
  }
});

export default router;

/*
==============================================================
                    üìã API DOCUMENTATION
==============================================================

üîê AUTHENTICATION ENDPOINTS:
‚îú‚îÄ‚îÄ POST /auth/register              ‚Üí ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
‚îú‚îÄ‚îÄ POST /auth/login                ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
‚îú‚îÄ‚îÄ POST /auth/verify               ‚Üí ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
‚îú‚îÄ‚îÄ POST /auth/resend-verification  ‚Üí ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
‚îî‚îÄ‚îÄ GET  /auth/home                 ‚Üí ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (Protected)

üìä SENSOR DATA ENDPOINTS:
‚îú‚îÄ‚îÄ POST /auth/api/sensor-data      ‚Üí ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32
‚îî‚îÄ‚îÄ GET  /auth/sensor-data          ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå (Protected)

üë§ USER PROFILE ENDPOINTS:
‚îú‚îÄ‚îÄ GET  /auth/profile              ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (Protected)
‚îú‚îÄ‚îÄ PUT  /auth/profile/update-name  ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠ (Protected)
‚îú‚îÄ‚îÄ PUT  /auth/profile/update-password ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (Protected)
‚îî‚îÄ‚îÄ POST /auth/profile/upload-picture ‚Üí ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (Protected)

üìß UTILITY ENDPOINTS:
‚îú‚îÄ‚îÄ POST /auth/send-user-id         ‚Üí ‡∏™‡πà‡∏á User ID ‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (Protected)
‚îî‚îÄ‚îÄ GET  /auth/user-info            ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Protected)

üé´ JWT TOKEN FORMAT:
Authorization: Bearer <JWT_TOKEN>

üìß EMAIL CONFIGURATION:
- Service: Gmail SMTP
- Account: email@gmail.com
- Password: App Password (NOT regular password)

üîí SECURITY FEATURES:
- Password Hashing (BCrypt)
- JWT Token Authentication (24h expiry)
- Email Verification
- Protected Routes
- File Upload Validation

üêõ COMMON ISSUES:
1. JWT_KEY not found ‚Üí Check .env file
2. Email not sending ‚Üí Check Gmail App Password
3. File upload failed ‚Üí Check uploads folder permissions
4. Database error ‚Üí Check MySQL connection
==============================================================
*/
