/*
==============================================================
                    WLS ESP32 SENSOR DATA READER
==============================================================
üìù Description: ESP32 Arduino Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô RS485
üéØ Purpose: ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á WLS Backend Server
üîß Technologies: ESP32 + RS485 + WiFi + HTTP Client + JSON

üìÇ Hardware Connections:
‚îú‚îÄ‚îÄ RS485 RX Pin ‚Üí GPIO 8
‚îú‚îÄ‚îÄ RS485 TX Pin ‚Üí GPIO 7
‚îú‚îÄ‚îÄ WiFi Module ‚Üí Built-in ESP32
‚îî‚îÄ‚îÄ Power ‚Üí 3.3V/5V

üìä Data Flow:
1. ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô RS485 (5 bytes)
2. ESP32 ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
3. ‡πÅ‡∏õ‡∏•‡∏á Node ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
4. ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Object
5. ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend ‡∏ú‡πà‡∏≤‡∏ô HTTP POST

‚ö†Ô∏è  Important Notes:
1. ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ ArduinoJson ‡πÉ‡∏ô Arduino IDE
2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WiFi SSID ‡πÅ‡∏•‡∏∞ Password ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
3. Backend Server ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô
4. User ID ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
==============================================================
*/

#include <HardwareSerial.h>  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RS485 Communication
#include <WiFi.h>            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
#include <HTTPClient.h>      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á HTTP Request
#include <ArduinoJson.h>     // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á JSON Object

/*
==============================================================
                    üîå RS485 CONFIGURATION
==============================================================
üìù Purpose: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô RS485 Protocol
üîß Hardware: RS485 Module ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ESP32

üìä RS485 Protocol:
- Baud Rate: 9600
- Data Bits: 8
- Parity: None
- Stop Bits: 1
- RX Pin: GPIO 8 (‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
- TX Pin: GPIO 7 (‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)

üì¶ Data Frame Format (5 bytes):
[0] = 0x3A (Start Byte)
[1] = Node ID ('A', 'B', 'C', 'D')
[2] = Value Low Byte
[3] = Value High Byte
[4] = End Byte
==============================================================
*/

#define RS485_RX_PIN 8  // GPIO 8 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RS485
#define RS485_TX_PIN 7  // GPIO 7 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RS485
HardwareSerial rs485Serial(1); // ‡πÉ‡∏ä‡πâ Serial Port 1 ‡∏Ç‡∏≠‡∏á ESP32

/*
==============================================================
                    üåê WIFI & BACKEND CONFIGURATION
==============================================================
üìù Purpose: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡πÅ‡∏•‡∏∞ Backend Server

üîß WiFi Settings:
- SSID: ‡∏ä‡∏∑‡πà‡∏≠ WiFi Network
- Password: ‡∏£‡∏´‡∏±s‡∏ú‡πà‡∏≤‡∏ô WiFi

üåç Backend API Endpoint:
- URL: http://192.168.2.25:3000/auth/api/sensor-data
- Method: POST
- Content-Type: application/json
- Body: JSON Object with sensor data

‚ö†Ô∏è  Configuration Notes:
1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô SSID ‡πÅ‡∏•‡∏∞ Password ‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IP Address ‡∏ï‡∏≤‡∏° Backend Server
3. Port 3000 = Default port ‡∏Ç‡∏≠‡∏á WLS Backend
==============================================================
*/

const char* ssid = "QW_F1_2.4G";        // üì∂ ‡∏ä‡∏∑‡πà‡∏≠ WiFi Network
const char* password = "Qwave@dmin";     // üîê ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô WiFi
const String backendURL = "http://192.168.2.25:3000/auth/api/sensor-data"; // üåê Backend API Endpoint

/*
==============================================================
                    üè∑Ô∏è DEVICE IDENTIFICATION
==============================================================
üìù Purpose: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á ESP32 ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

üë§ USER_ID:
- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö User ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (users.id)
- ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
- ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

üî¢ ESP32_SERIAL_NUMBER:
- ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á ESP32 ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
- ‡πÉ‡∏ä‡πâ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32 ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
- ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Debug ‡πÅ‡∏•‡∏∞ Monitor

üéØ SENSOR_TYPE:
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (WaterLevel, Temperature, etc.)
- ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Filter ‡πÅ‡∏•‡∏∞ Analyze ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
==============================================================
*/

const String USER_ID = "38";              // üë§ User ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á)
const String ESP32_SERIAL_NUMBER = "1";   // üî¢ Serial Number ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á ESP32 ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
const String SENSOR_TYPE = "WaterLevel";  // üåä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥

/*
==============================================================
                    üì¶ DATA BUFFER MANAGEMENT
==============================================================
üìù Purpose: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å RS485

üíæ Buffer Array:
- ‡∏Ç‡∏ô‡∏≤‡∏î 10 bytes (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏ô)
- ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å RS485 ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

üìä Buffer Index:
- ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô Buffer
- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö 5 bytes
==============================================================
*/

uint8_t buffer[10];        // üì¶ Buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RS485
uint8_t bufferIndex = 0;   // üìç Index ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô Buffer

/*
==============================================================
                    üöÄ SETUP FUNCTION
==============================================================
üìù Purpose: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô Power On

üîß Initialization Process:
1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Serial Communication (Debug)
2. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô RS485 Communication
3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi Network
4. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤

‚è±Ô∏è  Connection Timeout:
- ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤
- ‡πÅ‡∏™‡∏î‡∏á "." ‡∏ó‡∏∏‡∏Å‡πÜ 500ms ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
==============================================================
*/

void setup() {
  // üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Serial Communication ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug
  Serial.begin(115200);  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß 115200 baud
  
  // üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô RS485 Communication
  rs485Serial.begin(9600, SERIAL_8N1, RS485_RX_PIN, RS485_TX_PIN);
  
  // üåê ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  // ‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");  // ‡πÅ‡∏™‡∏î‡∏á Progress
  }
  
  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  Serial.println("\n‚úÖ WiFi Connected. IP: " + WiFi.localIP().toString());
  Serial.println("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RS485...");
  Serial.println("üë§ User ID: " + USER_ID);
  Serial.println("üî¢ ESP32 Serial: " + ESP32_SERIAL_NUMBER);
  Serial.println("üåä Sensor Type: " + SENSOR_TYPE);
  Serial.println("üåê Backend URL: " + backendURL);
  Serial.println("====================================");
}

/*
==============================================================
                    üè∑Ô∏è NODE ID TO NAME CONVERTER
==============================================================
üìù Purpose: ‡πÅ‡∏õ‡∏•‡∏á Node ID (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢

üìä Node Mapping:
- 'A' ‚Üí "Qwave"     (‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å)
- 'B' ‚Üí "Factory"   (‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô)
- 'C' ‚Üí "Warehouse" (‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
- 'D' ‚Üí "Lab"       (‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πá‡∏ö)
- ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‚Üí "Unknown"  (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å)

üéØ Benefits:
- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Database ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
- Frontend ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
- ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ Debug ‡πÅ‡∏•‡∏∞ Monitor

‚ö†Ô∏è  Adding New Nodes:
‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° Node ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° case ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
==============================================================
*/

String getNodeName(char nodeChar) {
  switch (nodeChar) {
    case 'A': return "Qwave";      // üè¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
    case 'B': return "Factory";    // üè≠ ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
    case 'C': return "Warehouse";  // üì¶ ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    case 'D': return "Lab";        // üî¨ ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πá‡∏ö
    default:  return "Unknown";    // ‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  }
}

/*
==============================================================
                    üîÑ MAIN LOOP FUNCTION
==============================================================
üìù Purpose: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡πÜ ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤

üîÑ Process Flow:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô RS485 Buffer ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
2. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞ Byte
3. ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Buffer ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö 5 bytes
4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Start Byte (0x3A)
5. ‡πÅ‡∏õ‡∏•‡∏á Node ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å 2 bytes (Little Endian)
7. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
8. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Buffer ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà

üìä Data Parsing:
- buffer[0] = Start Byte (0x3A)
- buffer[1] = Node ID ('A', 'B', 'C', 'D')
- buffer[2] = Value Low Byte
- buffer[3] = Value High Byte
- buffer[4] = End Byte

üí° Value Calculation:
value = (buffer[3] << 8) | buffer[2]  // Little Endian format
==============================================================
*/

void loop() {
  // üì° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô RS485 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  while (rs485Serial.available()) {
    // üì• ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞ byte
    byte b = rs485Serial.read();
    
    // üì¶ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Buffer (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Buffer Overflow)
    if (bufferIndex < sizeof(buffer)) {
      buffer[bufferIndex++] = b;
    }
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö 5 bytes ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (bufferIndex == 5) {
      
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Start Byte
      if (buffer[0] == 0x3A) {
        
        // üìä ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        char nodeChar = (char)buffer[1]; // Node ID
        uint16_t value = ((uint16_t)buffer[3] << 8) | buffer[2]; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå (Little Endian)
        String nodeName = getNodeName(nodeChar); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        
        // üñ•Ô∏è ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Serial Monitor
        Serial.print("üì• Node ");
        Serial.print(nodeChar);
        Serial.print(" (");
        Serial.print(nodeName);
        Serial.print(") ‚Üí ‡∏Ñ‡πà‡∏≤: ");
        Serial.print(value);
        Serial.println(" (Raw Data: " + 
                      String(buffer[0], HEX) + " " +
                      String(buffer[1], HEX) + " " +
                      String(buffer[2], HEX) + " " +
                      String(buffer[3], HEX) + " " +
                      String(buffer[4], HEX) + ")");
        
        // üåê ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Backend
        sendSensorData(USER_ID, ESP32_SERIAL_NUMBER, nodeName, SENSOR_TYPE, value);
        
      } else {
        // ‚ùå Start Byte ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        Serial.println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö start byte 0x3A ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        Serial.print("üì¶ Received: ");
        for (int i = 0; i < 5; i++) {
          Serial.print(String(buffer[i], HEX) + " ");
        }
        Serial.println();
      }
      
      // üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      bufferIndex = 0;
    }
  }
}

/*
==============================================================
                    üåê SEND DATA TO BACKEND FUNCTION
==============================================================
üìù Purpose: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á WLS Backend Server

üì• Parameters:
- userId: User ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- esp32Serial: Serial Number ‡∏Ç‡∏≠‡∏á ESP32
- nodeName: ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
- sensorType: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
- value: ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå

üìä JSON Structure:
{
  "userId": "38",
  "esp32Serial": "1",
  "nodeName": "Qwave",
  "sensorType": "WaterLevel",
  "value": 1024
}

üåê HTTP Request:
- Method: POST
- Content-Type: application/json
- Endpoint: /auth/api/sensor-data

‚úÖ Success Response: HTTP 201
‚ùå Error Response: HTTP 4xx/5xx

‚ö†Ô∏è  Error Handling:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
2. ‡πÅ‡∏™‡∏î‡∏á HTTP Status Code
3. ‡πÅ‡∏™‡∏î‡∏á Error Message ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
==============================================================
*/

void sendSensorData(String userId, String esp32Serial, String nodeName, String sensorType, uint16_t value) {
  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ WiFi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚õî WiFi Disconnected. Cannot send data.");
    Serial.println("üîÑ Attempting to reconnect...");
    WiFi.begin(ssid, password);
    return;
  }
  
  // üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô HTTP Client
  HTTPClient http;
  http.begin(backendURL);
  http.addHeader("Content-Type", "application/json");
  
  // üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Object
  StaticJsonDocument<300> doc;
  doc["userId"] = userId;           // üë§ User ID
  doc["esp32Serial"] = esp32Serial; // üî¢ ESP32 Serial Number
  doc["nodeName"] = nodeName;       // üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
  doc["sensorType"] = sensorType;   // üåä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
  doc["value"] = value;             // üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
  
  // üìù ‡πÅ‡∏õ‡∏•‡∏á JSON Object ‡πÄ‡∏õ‡πá‡∏ô String
  String jsonPayload;
  serializeJson(doc, jsonPayload);
  
  // üñ•Ô∏è ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
  Serial.println("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend:");
  Serial.println("üìÑ " + jsonPayload);
  Serial.println("üéØ URL: " + backendURL);
  
  // üì§ ‡∏™‡πà‡∏á HTTP POST Request
  int httpCode = http.POST(jsonPayload);
  String response = http.getString();
  
  // üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  if (httpCode == 201) {
    Serial.println("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! HTTP Code: " + String(httpCode));
    Serial.println("üìã Response: " + response);
  } else {
    Serial.println("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î! HTTP Code: " + String(httpCode));
    Serial.println("üìÑ Error Response: " + response);
    Serial.println("üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Backend Server ‡πÅ‡∏•‡∏∞ Network Connection");
  }
  
  // üîö ‡∏õ‡∏¥‡∏î HTTP Connection
  http.end();
  
  // ‚è±Ô∏è ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  delay(1000);
}

/*
==============================================================
                    üìã ARDUINO IDE SETUP GUIDE
==============================================================

üöÄ Required Libraries:
1. ArduinoJson by Benoit Blanchon
   - Tools ‚Üí Manage Libraries ‚Üí Search "ArduinoJson" ‚Üí Install

üì± Board Configuration:
1. Board: ESP32 Dev Module
2. CPU Frequency: 240MHz (WiFi/BT)
3. Flash Frequency: 80MHz
4. Flash Mode: DIO
5. Flash Size: 4MB (32Mb)
6. Partition Scheme: Default 4MB with spiffs
7. Core Debug Level: None

üîå Hardware Connections:
ESP32 Pin    ‚Üí    RS485 Module
---------------------------------
GPIO 8       ‚Üí    RX (Data Input)
GPIO 7       ‚Üí    TX (Data Output)
3.3V         ‚Üí    VCC
GND          ‚Üí    GND

üìä RS485 Sensor Output Format:
Byte 0: 0x3A (Start Byte)
Byte 1: Node ID ('A', 'B', 'C', 'D')
Byte 2: Value Low Byte
Byte 3: Value High Byte
Byte 4: End Byte

üåê Network Requirements:
- WiFi Network with Internet Access
- Backend Server running on specified IP:Port
- Firewall allow HTTP traffic on port 3000

üêõ Troubleshooting:
1. "WiFi Connection Failed" ‚Üí Check SSID/Password
2. "HTTP Error 500" ‚Üí Check Backend Server Status
3. "No RS485 Data" ‚Üí Check Hardware Connections
4. "JSON Parse Error" ‚Üí Check ArduinoJson Library

üìà Monitoring:
- Open Serial Monitor (Tools ‚Üí Serial Monitor)
- Set Baud Rate to 115200
- Watch for sensor data and HTTP responses
- Check Backend Server logs for received data

‚ö†Ô∏è  Production Notes:
1. Change WiFi credentials for production network
2. Update Backend URL to production server
3. Set appropriate USER_ID for each ESP32
4. Add error recovery and watchdog timer
5. Implement OTA (Over-The-Air) updates
==============================================================
*/